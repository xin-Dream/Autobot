// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph_options.proto

#include "cartographer/mapping/proto/pose_graph_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ConstraintBuilderOptions;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OptimizationProblemOptions;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
namespace cartographer {
namespace mapping {
namespace proto {
class PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D>
      _instance;
} _PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
class PoseGraphOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseGraphOptions>
      _instance;
} _PoseGraphOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto {
static void InitDefaultsPoseGraphOptions_OverlappingSubmapsTrimmerOptions2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoseGraphOptions_OverlappingSubmapsTrimmerOptions2D}, {}};

static void InitDefaultsPoseGraphOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseGraphOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseGraphOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseGraphOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PoseGraphOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPoseGraphOptions}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::scc_info_ConstraintBuilderOptions.base,
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::scc_info_OptimizationProblemOptions.base,
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::scc_info_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseGraphOptions.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, fresh_submaps_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, min_covered_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, min_added_submaps_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, optimize_every_n_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, constraint_builder_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, matcher_translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, matcher_rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, optimization_problem_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, max_num_final_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, global_sampling_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, log_residual_histograms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, global_constraint_search_after_n_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, overlapping_submaps_trimmer_2d_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D)},
  { 8, -1, sizeof(::cartographer::mapping::proto::PoseGraphOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseGraphOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cartographer/mapping/proto/pose_graph_options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3cartographer/mapping/proto/pose_graph_"
      "options.proto\022\032cartographer.mapping.prot"
      "o\032Fcartographer/mapping/proto/pose_graph"
      "/constraint_builder_options.proto\032Hcarto"
      "grapher/mapping/proto/pose_graph/optimiz"
      "ation_problem_options.proto\"\323\005\n\020PoseGrap"
      "hOptions\022\036\n\026optimize_every_n_nodes\030\001 \001(\005"
      "\022d\n\032constraint_builder_options\030\003 \001(\0132@.c"
      "artographer.mapping.constraints.proto.Co"
      "nstraintBuilderOptions\022\"\n\032matcher_transl"
      "ation_weight\030\007 \001(\001\022\037\n\027matcher_rotation_w"
      "eight\030\010 \001(\001\022i\n\034optimization_problem_opti"
      "ons\030\004 \001(\0132C.cartographer.mapping.optimiz"
      "ation.proto.OptimizationProblemOptions\022 "
      "\n\030max_num_final_iterations\030\006 \001(\005\022\035\n\025glob"
      "al_sampling_ratio\030\005 \001(\001\022\037\n\027log_residual_"
      "histograms\030\t \001(\010\0220\n(global_constraint_se"
      "arch_after_n_seconds\030\n \001(\001\022w\n\036overlappin"
      "g_submaps_trimmer_2d\030\013 \001(\0132O.cartographe"
      "r.mapping.proto.PoseGraphOptions.Overlap"
      "pingSubmapsTrimmerOptions2D\032|\n\"Overlappi"
      "ngSubmapsTrimmerOptions2D\022\033\n\023fresh_subma"
      "ps_count\030\001 \001(\005\022\030\n\020min_covered_area\030\002 \001(\001"
      "\022\037\n\027min_added_submaps_count\030\003 \001(\005b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_graph_options.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::kFreshSubmapsCountFieldNumber;
const int PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::kMinCoveredAreaFieldNumber;
const int PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::kMinAddedSubmapsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::scc_info_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
}
PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_covered_area_, &from.min_covered_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_added_submaps_count_) -
    reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SharedCtor() {
  ::memset(&min_covered_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_added_submaps_count_) -
      reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
}

PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::~PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  SharedDtor();
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SharedDtor() {
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::scc_info_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D.base);
  return *internal_default_instance();
}


void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_covered_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_added_submaps_count_) -
      reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
  _internal_metadata_.Clear();
}

bool PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fresh_submaps_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fresh_submaps_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_covered_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_covered_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_added_submaps_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_added_submaps_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  return false;
#undef DO_
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fresh_submaps_count = 1;
  if (this->fresh_submaps_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fresh_submaps_count(), output);
  }

  // double min_covered_area = 2;
  if (this->min_covered_area() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_covered_area(), output);
  }

  // int32 min_added_submaps_count = 3;
  if (this->min_added_submaps_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_added_submaps_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
}

::google::protobuf::uint8* PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fresh_submaps_count = 1;
  if (this->fresh_submaps_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fresh_submaps_count(), target);
  }

  // double min_covered_area = 2;
  if (this->min_covered_area() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_covered_area(), target);
  }

  // int32 min_added_submaps_count = 3;
  if (this->min_added_submaps_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_added_submaps_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  return target;
}

size_t PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double min_covered_area = 2;
  if (this->min_covered_area() != 0) {
    total_size += 1 + 8;
  }

  // int32 fresh_submaps_count = 1;
  if (this->fresh_submaps_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fresh_submaps_count());
  }

  // int32 min_added_submaps_count = 3;
  if (this->min_added_submaps_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_added_submaps_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
    MergeFrom(*source);
  }
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_covered_area() != 0) {
    set_min_covered_area(from.min_covered_area());
  }
  if (from.fresh_submaps_count() != 0) {
    set_fresh_submaps_count(from.fresh_submaps_count());
  }
  if (from.min_added_submaps_count() != 0) {
    set_min_added_submaps_count(from.min_added_submaps_count());
  }
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::CopyFrom(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::IsInitialized() const {
  return true;
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::Swap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::InternalSwap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* other) {
  using std::swap;
  swap(min_covered_area_, other->min_covered_area_);
  swap(fresh_submaps_count_, other->fresh_submaps_count_);
  swap(min_added_submaps_count_, other->min_added_submaps_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseGraphOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_PoseGraphOptions_default_instance_._instance.get_mutable()->constraint_builder_options_ = const_cast< ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions*>(
      ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::internal_default_instance());
  ::cartographer::mapping::proto::_PoseGraphOptions_default_instance_._instance.get_mutable()->optimization_problem_options_ = const_cast< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions*>(
      ::cartographer::mapping::optimization::proto::OptimizationProblemOptions::internal_default_instance());
  ::cartographer::mapping::proto::_PoseGraphOptions_default_instance_._instance.get_mutable()->overlapping_submaps_trimmer_2d_ = const_cast< ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D*>(
      ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::internal_default_instance());
}
void PoseGraphOptions::clear_constraint_builder_options() {
  if (GetArenaNoVirtual() == NULL && constraint_builder_options_ != NULL) {
    delete constraint_builder_options_;
  }
  constraint_builder_options_ = NULL;
}
void PoseGraphOptions::clear_optimization_problem_options() {
  if (GetArenaNoVirtual() == NULL && optimization_problem_options_ != NULL) {
    delete optimization_problem_options_;
  }
  optimization_problem_options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraphOptions::kOptimizeEveryNNodesFieldNumber;
const int PoseGraphOptions::kConstraintBuilderOptionsFieldNumber;
const int PoseGraphOptions::kMatcherTranslationWeightFieldNumber;
const int PoseGraphOptions::kMatcherRotationWeightFieldNumber;
const int PoseGraphOptions::kOptimizationProblemOptionsFieldNumber;
const int PoseGraphOptions::kMaxNumFinalIterationsFieldNumber;
const int PoseGraphOptions::kGlobalSamplingRatioFieldNumber;
const int PoseGraphOptions::kLogResidualHistogramsFieldNumber;
const int PoseGraphOptions::kGlobalConstraintSearchAfterNSecondsFieldNumber;
const int PoseGraphOptions::kOverlappingSubmapsTrimmer2DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraphOptions::PoseGraphOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::scc_info_PoseGraphOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraphOptions)
}
PoseGraphOptions::PoseGraphOptions(const PoseGraphOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constraint_builder_options()) {
    constraint_builder_options_ = new ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions(*from.constraint_builder_options_);
  } else {
    constraint_builder_options_ = NULL;
  }
  if (from.has_optimization_problem_options()) {
    optimization_problem_options_ = new ::cartographer::mapping::optimization::proto::OptimizationProblemOptions(*from.optimization_problem_options_);
  } else {
    optimization_problem_options_ = NULL;
  }
  if (from.has_overlapping_submaps_trimmer_2d()) {
    overlapping_submaps_trimmer_2d_ = new ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(*from.overlapping_submaps_trimmer_2d_);
  } else {
    overlapping_submaps_trimmer_2d_ = NULL;
  }
  ::memcpy(&optimize_every_n_nodes_, &from.optimize_every_n_nodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_residual_histograms_) -
    reinterpret_cast<char*>(&optimize_every_n_nodes_)) + sizeof(log_residual_histograms_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraphOptions)
}

void PoseGraphOptions::SharedCtor() {
  ::memset(&constraint_builder_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_residual_histograms_) -
      reinterpret_cast<char*>(&constraint_builder_options_)) + sizeof(log_residual_histograms_));
}

PoseGraphOptions::~PoseGraphOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraphOptions)
  SharedDtor();
}

void PoseGraphOptions::SharedDtor() {
  if (this != internal_default_instance()) delete constraint_builder_options_;
  if (this != internal_default_instance()) delete optimization_problem_options_;
  if (this != internal_default_instance()) delete overlapping_submaps_trimmer_2d_;
}

void PoseGraphOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseGraphOptions::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseGraphOptions& PoseGraphOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::scc_info_PoseGraphOptions.base);
  return *internal_default_instance();
}


void PoseGraphOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraphOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && constraint_builder_options_ != NULL) {
    delete constraint_builder_options_;
  }
  constraint_builder_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && optimization_problem_options_ != NULL) {
    delete optimization_problem_options_;
  }
  optimization_problem_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && overlapping_submaps_trimmer_2d_ != NULL) {
    delete overlapping_submaps_trimmer_2d_;
  }
  overlapping_submaps_trimmer_2d_ = NULL;
  ::memset(&optimize_every_n_nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_residual_histograms_) -
      reinterpret_cast<char*>(&optimize_every_n_nodes_)) + sizeof(log_residual_histograms_));
  _internal_metadata_.Clear();
}

bool PoseGraphOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraphOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 optimize_every_n_nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optimize_every_n_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optimization_problem_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double global_sampling_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_final_iterations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_final_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matcher_translation_weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matcher_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matcher_rotation_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matcher_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_residual_histograms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_residual_histograms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double global_constraint_search_after_n_seconds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_constraint_search_after_n_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overlapping_submaps_trimmer_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraphOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraphOptions)
  return false;
#undef DO_
}

void PoseGraphOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraphOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optimize_every_n_nodes(), output);
  }

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_constraint_builder_options(), output);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_optimization_problem_options(), output);
  }

  // double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->global_sampling_ratio(), output);
  }

  // int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_num_final_iterations(), output);
  }

  // double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->matcher_translation_weight(), output);
  }

  // double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->matcher_rotation_weight(), output);
  }

  // bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->log_residual_histograms(), output);
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->global_constraint_search_after_n_seconds(), output);
  }

  // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
  if (this->has_overlapping_submaps_trimmer_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_overlapping_submaps_trimmer_2d(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraphOptions)
}

::google::protobuf::uint8* PoseGraphOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraphOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optimize_every_n_nodes(), target);
  }

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_constraint_builder_options(), deterministic, target);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_optimization_problem_options(), deterministic, target);
  }

  // double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->global_sampling_ratio(), target);
  }

  // int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_num_final_iterations(), target);
  }

  // double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->matcher_translation_weight(), target);
  }

  // double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->matcher_rotation_weight(), target);
  }

  // bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->log_residual_histograms(), target);
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->global_constraint_search_after_n_seconds(), target);
  }

  // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
  if (this->has_overlapping_submaps_trimmer_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_overlapping_submaps_trimmer_2d(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraphOptions)
  return target;
}

size_t PoseGraphOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraphOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_builder_options_);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optimization_problem_options_);
  }

  // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
  if (this->has_overlapping_submaps_trimmer_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overlapping_submaps_trimmer_2d_);
  }

  // int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optimize_every_n_nodes());
  }

  // int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_num_final_iterations());
  }

  // double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    total_size += 1 + 8;
  }

  // bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseGraphOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraphOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseGraphOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraphOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraphOptions)
    MergeFrom(*source);
  }
}

void PoseGraphOptions::MergeFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constraint_builder_options()) {
    mutable_constraint_builder_options()->::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::MergeFrom(from.constraint_builder_options());
  }
  if (from.has_optimization_problem_options()) {
    mutable_optimization_problem_options()->::cartographer::mapping::optimization::proto::OptimizationProblemOptions::MergeFrom(from.optimization_problem_options());
  }
  if (from.has_overlapping_submaps_trimmer_2d()) {
    mutable_overlapping_submaps_trimmer_2d()->::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(from.overlapping_submaps_trimmer_2d());
  }
  if (from.optimize_every_n_nodes() != 0) {
    set_optimize_every_n_nodes(from.optimize_every_n_nodes());
  }
  if (from.max_num_final_iterations() != 0) {
    set_max_num_final_iterations(from.max_num_final_iterations());
  }
  if (from.global_sampling_ratio() != 0) {
    set_global_sampling_ratio(from.global_sampling_ratio());
  }
  if (from.matcher_translation_weight() != 0) {
    set_matcher_translation_weight(from.matcher_translation_weight());
  }
  if (from.matcher_rotation_weight() != 0) {
    set_matcher_rotation_weight(from.matcher_rotation_weight());
  }
  if (from.global_constraint_search_after_n_seconds() != 0) {
    set_global_constraint_search_after_n_seconds(from.global_constraint_search_after_n_seconds());
  }
  if (from.log_residual_histograms() != 0) {
    set_log_residual_histograms(from.log_residual_histograms());
  }
}

void PoseGraphOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraphOptions::CopyFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraphOptions::IsInitialized() const {
  return true;
}

void PoseGraphOptions::Swap(PoseGraphOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraphOptions::InternalSwap(PoseGraphOptions* other) {
  using std::swap;
  swap(constraint_builder_options_, other->constraint_builder_options_);
  swap(optimization_problem_options_, other->optimization_problem_options_);
  swap(overlapping_submaps_trimmer_2d_, other->overlapping_submaps_trimmer_2d_);
  swap(optimize_every_n_nodes_, other->optimize_every_n_nodes_);
  swap(max_num_final_iterations_, other->max_num_final_iterations_);
  swap(global_sampling_ratio_, other->global_sampling_ratio_);
  swap(matcher_translation_weight_, other->matcher_translation_weight_);
  swap(matcher_rotation_weight_, other->matcher_rotation_weight_);
  swap(global_constraint_search_after_n_seconds_, other->global_constraint_search_after_n_seconds_);
  swap(log_residual_histograms_, other->log_residual_histograms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseGraphOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::mapping::proto::PoseGraphOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraphOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseGraphOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
