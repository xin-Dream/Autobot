// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_extrapolator_options.proto

#include "cartographer/mapping/proto/pose_extrapolator_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CeresSolverOptions;
}  // namespace protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConstantVelocityPoseExtrapolatorOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImuBasedPoseExtrapolatorOptions;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto
namespace cartographer {
namespace mapping {
namespace proto {
class ConstantVelocityPoseExtrapolatorOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstantVelocityPoseExtrapolatorOptions>
      _instance;
} _ConstantVelocityPoseExtrapolatorOptions_default_instance_;
class ImuBasedPoseExtrapolatorOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuBasedPoseExtrapolatorOptions>
      _instance;
} _ImuBasedPoseExtrapolatorOptions_default_instance_;
class PoseExtrapolatorOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseExtrapolatorOptions>
      _instance;
} _PoseExtrapolatorOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto {
static void InitDefaultsConstantVelocityPoseExtrapolatorOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_ConstantVelocityPoseExtrapolatorOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConstantVelocityPoseExtrapolatorOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConstantVelocityPoseExtrapolatorOptions}, {}};

static void InitDefaultsImuBasedPoseExtrapolatorOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImuBasedPoseExtrapolatorOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImuBasedPoseExtrapolatorOptions}, {
      &protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::scc_info_CeresSolverOptions.base,}};

static void InitDefaultsPoseExtrapolatorOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseExtrapolatorOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseExtrapolatorOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PoseExtrapolatorOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPoseExtrapolatorOptions}, {
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_ConstantVelocityPoseExtrapolatorOptions.base,
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_ImuBasedPoseExtrapolatorOptions.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConstantVelocityPoseExtrapolatorOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImuBasedPoseExtrapolatorOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseExtrapolatorOptions.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions, imu_gravity_time_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions, pose_queue_duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, pose_queue_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, gravity_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, pose_translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, pose_rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, imu_acceleration_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, imu_rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, solver_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, odometry_translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions, odometry_rotation_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, use_imu_based_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, constant_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::PoseExtrapolatorOptions, imu_based_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions)},
  { 7, -1, sizeof(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions)},
  { 21, -1, sizeof(::cartographer::mapping::proto::PoseExtrapolatorOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_ConstantVelocityPoseExtrapolatorOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cartographer/mapping/proto/pose_extrapolator_options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n:cartographer/mapping/proto/pose_extrap"
      "olator_options.proto\022\032cartographer.mappi"
      "ng.proto\0324cartographer/common/proto/cere"
      "s_solver_options.proto\"i\n\'ConstantVeloci"
      "tyPoseExtrapolatorOptions\022!\n\031imu_gravity"
      "_time_constant\030\001 \001(\001\022\033\n\023pose_queue_durat"
      "ion\030\002 \001(\001\"\343\002\n\037ImuBasedPoseExtrapolatorOp"
      "tions\022\033\n\023pose_queue_duration\030\001 \001(\001\022\030\n\020gr"
      "avity_constant\030\002 \001(\001\022\037\n\027pose_translation"
      "_weight\030\003 \001(\001\022\034\n\024pose_rotation_weight\030\004 "
      "\001(\001\022\037\n\027imu_acceleration_weight\030\005 \001(\001\022\033\n\023"
      "imu_rotation_weight\030\006 \001(\001\022E\n\016solver_opti"
      "ons\030\007 \001(\0132-.cartographer.common.proto.Ce"
      "resSolverOptions\022#\n\033odometry_translation"
      "_weight\030\010 \001(\001\022 \n\030odometry_rotation_weigh"
      "t\030\t \001(\001\"\340\001\n\027PoseExtrapolatorOptions\022\025\n\ru"
      "se_imu_based\030\001 \001(\010\022^\n\021constant_velocity\030"
      "\002 \001(\0132C.cartographer.mapping.proto.Const"
      "antVelocityPoseExtrapolatorOptions\022N\n\tim"
      "u_based\030\003 \001(\0132;.cartographer.mapping.pro"
      "to.ImuBasedPoseExtrapolatorOptionsb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_extrapolator_options.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void ConstantVelocityPoseExtrapolatorOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstantVelocityPoseExtrapolatorOptions::kImuGravityTimeConstantFieldNumber;
const int ConstantVelocityPoseExtrapolatorOptions::kPoseQueueDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstantVelocityPoseExtrapolatorOptions::ConstantVelocityPoseExtrapolatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_ConstantVelocityPoseExtrapolatorOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}
ConstantVelocityPoseExtrapolatorOptions::ConstantVelocityPoseExtrapolatorOptions(const ConstantVelocityPoseExtrapolatorOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&imu_gravity_time_constant_, &from.imu_gravity_time_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&pose_queue_duration_) -
    reinterpret_cast<char*>(&imu_gravity_time_constant_)) + sizeof(pose_queue_duration_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}

void ConstantVelocityPoseExtrapolatorOptions::SharedCtor() {
  ::memset(&imu_gravity_time_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_queue_duration_) -
      reinterpret_cast<char*>(&imu_gravity_time_constant_)) + sizeof(pose_queue_duration_));
}

ConstantVelocityPoseExtrapolatorOptions::~ConstantVelocityPoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  SharedDtor();
}

void ConstantVelocityPoseExtrapolatorOptions::SharedDtor() {
}

void ConstantVelocityPoseExtrapolatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConstantVelocityPoseExtrapolatorOptions::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstantVelocityPoseExtrapolatorOptions& ConstantVelocityPoseExtrapolatorOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_ConstantVelocityPoseExtrapolatorOptions.base);
  return *internal_default_instance();
}


void ConstantVelocityPoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&imu_gravity_time_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_queue_duration_) -
      reinterpret_cast<char*>(&imu_gravity_time_constant_)) + sizeof(pose_queue_duration_));
  _internal_metadata_.Clear();
}

bool ConstantVelocityPoseExtrapolatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double imu_gravity_time_constant = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pose_queue_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_queue_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return false;
#undef DO_
}

void ConstantVelocityPoseExtrapolatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double imu_gravity_time_constant = 1;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->imu_gravity_time_constant(), output);
  }

  // double pose_queue_duration = 2;
  if (this->pose_queue_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pose_queue_duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}

::google::protobuf::uint8* ConstantVelocityPoseExtrapolatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double imu_gravity_time_constant = 1;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->imu_gravity_time_constant(), target);
  }

  // double pose_queue_duration = 2;
  if (this->pose_queue_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pose_queue_duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return target;
}

size_t ConstantVelocityPoseExtrapolatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double imu_gravity_time_constant = 1;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 1 + 8;
  }

  // double pose_queue_duration = 2;
  if (this->pose_queue_duration() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantVelocityPoseExtrapolatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantVelocityPoseExtrapolatorOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstantVelocityPoseExtrapolatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void ConstantVelocityPoseExtrapolatorOptions::MergeFrom(const ConstantVelocityPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.pose_queue_duration() != 0) {
    set_pose_queue_duration(from.pose_queue_duration());
  }
}

void ConstantVelocityPoseExtrapolatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantVelocityPoseExtrapolatorOptions::CopyFrom(const ConstantVelocityPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantVelocityPoseExtrapolatorOptions::IsInitialized() const {
  return true;
}

void ConstantVelocityPoseExtrapolatorOptions::Swap(ConstantVelocityPoseExtrapolatorOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstantVelocityPoseExtrapolatorOptions::InternalSwap(ConstantVelocityPoseExtrapolatorOptions* other) {
  using std::swap;
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(pose_queue_duration_, other->pose_queue_duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConstantVelocityPoseExtrapolatorOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImuBasedPoseExtrapolatorOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_ImuBasedPoseExtrapolatorOptions_default_instance_._instance.get_mutable()->solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(
      ::cartographer::common::proto::CeresSolverOptions::internal_default_instance());
}
void ImuBasedPoseExtrapolatorOptions::clear_solver_options() {
  if (GetArenaNoVirtual() == NULL && solver_options_ != NULL) {
    delete solver_options_;
  }
  solver_options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuBasedPoseExtrapolatorOptions::kPoseQueueDurationFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kGravityConstantFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kPoseTranslationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kPoseRotationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kImuAccelerationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kImuRotationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kSolverOptionsFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kOdometryTranslationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kOdometryRotationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuBasedPoseExtrapolatorOptions::ImuBasedPoseExtrapolatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_ImuBasedPoseExtrapolatorOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}
ImuBasedPoseExtrapolatorOptions::ImuBasedPoseExtrapolatorOptions(const ImuBasedPoseExtrapolatorOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_solver_options()) {
    solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from.solver_options_);
  } else {
    solver_options_ = NULL;
  }
  ::memcpy(&pose_queue_duration_, &from.pose_queue_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&odometry_rotation_weight_) -
    reinterpret_cast<char*>(&pose_queue_duration_)) + sizeof(odometry_rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}

void ImuBasedPoseExtrapolatorOptions::SharedCtor() {
  ::memset(&solver_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_rotation_weight_) -
      reinterpret_cast<char*>(&solver_options_)) + sizeof(odometry_rotation_weight_));
}

ImuBasedPoseExtrapolatorOptions::~ImuBasedPoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  SharedDtor();
}

void ImuBasedPoseExtrapolatorOptions::SharedDtor() {
  if (this != internal_default_instance()) delete solver_options_;
}

void ImuBasedPoseExtrapolatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImuBasedPoseExtrapolatorOptions::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuBasedPoseExtrapolatorOptions& ImuBasedPoseExtrapolatorOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_ImuBasedPoseExtrapolatorOptions.base);
  return *internal_default_instance();
}


void ImuBasedPoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && solver_options_ != NULL) {
    delete solver_options_;
  }
  solver_options_ = NULL;
  ::memset(&pose_queue_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_rotation_weight_) -
      reinterpret_cast<char*>(&pose_queue_duration_)) + sizeof(odometry_rotation_weight_));
  _internal_metadata_.Clear();
}

bool ImuBasedPoseExtrapolatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pose_queue_duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_queue_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gravity_constant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gravity_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pose_translation_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pose_rotation_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double imu_acceleration_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_acceleration_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double imu_rotation_weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solver_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double odometry_translation_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double odometry_rotation_weight = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return false;
#undef DO_
}

void ImuBasedPoseExtrapolatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pose_queue_duration = 1;
  if (this->pose_queue_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pose_queue_duration(), output);
  }

  // double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gravity_constant(), output);
  }

  // double pose_translation_weight = 3;
  if (this->pose_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pose_translation_weight(), output);
  }

  // double pose_rotation_weight = 4;
  if (this->pose_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pose_rotation_weight(), output);
  }

  // double imu_acceleration_weight = 5;
  if (this->imu_acceleration_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->imu_acceleration_weight(), output);
  }

  // double imu_rotation_weight = 6;
  if (this->imu_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->imu_rotation_weight(), output);
  }

  // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_solver_options(), output);
  }

  // double odometry_translation_weight = 8;
  if (this->odometry_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->odometry_translation_weight(), output);
  }

  // double odometry_rotation_weight = 9;
  if (this->odometry_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->odometry_rotation_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}

::google::protobuf::uint8* ImuBasedPoseExtrapolatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pose_queue_duration = 1;
  if (this->pose_queue_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pose_queue_duration(), target);
  }

  // double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gravity_constant(), target);
  }

  // double pose_translation_weight = 3;
  if (this->pose_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pose_translation_weight(), target);
  }

  // double pose_rotation_weight = 4;
  if (this->pose_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pose_rotation_weight(), target);
  }

  // double imu_acceleration_weight = 5;
  if (this->imu_acceleration_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->imu_acceleration_weight(), target);
  }

  // double imu_rotation_weight = 6;
  if (this->imu_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->imu_rotation_weight(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_solver_options(), deterministic, target);
  }

  // double odometry_translation_weight = 8;
  if (this->odometry_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->odometry_translation_weight(), target);
  }

  // double odometry_rotation_weight = 9;
  if (this->odometry_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->odometry_rotation_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return target;
}

size_t ImuBasedPoseExtrapolatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *solver_options_);
  }

  // double pose_queue_duration = 1;
  if (this->pose_queue_duration() != 0) {
    total_size += 1 + 8;
  }

  // double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    total_size += 1 + 8;
  }

  // double pose_translation_weight = 3;
  if (this->pose_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double pose_rotation_weight = 4;
  if (this->pose_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double imu_acceleration_weight = 5;
  if (this->imu_acceleration_weight() != 0) {
    total_size += 1 + 8;
  }

  // double imu_rotation_weight = 6;
  if (this->imu_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double odometry_translation_weight = 8;
  if (this->odometry_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double odometry_rotation_weight = 9;
  if (this->odometry_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuBasedPoseExtrapolatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuBasedPoseExtrapolatorOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuBasedPoseExtrapolatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void ImuBasedPoseExtrapolatorOptions::MergeFrom(const ImuBasedPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_options()) {
    mutable_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.solver_options());
  }
  if (from.pose_queue_duration() != 0) {
    set_pose_queue_duration(from.pose_queue_duration());
  }
  if (from.gravity_constant() != 0) {
    set_gravity_constant(from.gravity_constant());
  }
  if (from.pose_translation_weight() != 0) {
    set_pose_translation_weight(from.pose_translation_weight());
  }
  if (from.pose_rotation_weight() != 0) {
    set_pose_rotation_weight(from.pose_rotation_weight());
  }
  if (from.imu_acceleration_weight() != 0) {
    set_imu_acceleration_weight(from.imu_acceleration_weight());
  }
  if (from.imu_rotation_weight() != 0) {
    set_imu_rotation_weight(from.imu_rotation_weight());
  }
  if (from.odometry_translation_weight() != 0) {
    set_odometry_translation_weight(from.odometry_translation_weight());
  }
  if (from.odometry_rotation_weight() != 0) {
    set_odometry_rotation_weight(from.odometry_rotation_weight());
  }
}

void ImuBasedPoseExtrapolatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuBasedPoseExtrapolatorOptions::CopyFrom(const ImuBasedPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuBasedPoseExtrapolatorOptions::IsInitialized() const {
  return true;
}

void ImuBasedPoseExtrapolatorOptions::Swap(ImuBasedPoseExtrapolatorOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuBasedPoseExtrapolatorOptions::InternalSwap(ImuBasedPoseExtrapolatorOptions* other) {
  using std::swap;
  swap(solver_options_, other->solver_options_);
  swap(pose_queue_duration_, other->pose_queue_duration_);
  swap(gravity_constant_, other->gravity_constant_);
  swap(pose_translation_weight_, other->pose_translation_weight_);
  swap(pose_rotation_weight_, other->pose_rotation_weight_);
  swap(imu_acceleration_weight_, other->imu_acceleration_weight_);
  swap(imu_rotation_weight_, other->imu_rotation_weight_);
  swap(odometry_translation_weight_, other->odometry_translation_weight_);
  swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImuBasedPoseExtrapolatorOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseExtrapolatorOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_._instance.get_mutable()->constant_velocity_ = const_cast< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions*>(
      ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::internal_default_instance());
  ::cartographer::mapping::proto::_PoseExtrapolatorOptions_default_instance_._instance.get_mutable()->imu_based_ = const_cast< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions*>(
      ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseExtrapolatorOptions::kUseImuBasedFieldNumber;
const int PoseExtrapolatorOptions::kConstantVelocityFieldNumber;
const int PoseExtrapolatorOptions::kImuBasedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseExtrapolatorOptions::PoseExtrapolatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_PoseExtrapolatorOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
}
PoseExtrapolatorOptions::PoseExtrapolatorOptions(const PoseExtrapolatorOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constant_velocity()) {
    constant_velocity_ = new ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions(*from.constant_velocity_);
  } else {
    constant_velocity_ = NULL;
  }
  if (from.has_imu_based()) {
    imu_based_ = new ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions(*from.imu_based_);
  } else {
    imu_based_ = NULL;
  }
  use_imu_based_ = from.use_imu_based_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
}

void PoseExtrapolatorOptions::SharedCtor() {
  ::memset(&constant_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_imu_based_) -
      reinterpret_cast<char*>(&constant_velocity_)) + sizeof(use_imu_based_));
}

PoseExtrapolatorOptions::~PoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
  SharedDtor();
}

void PoseExtrapolatorOptions::SharedDtor() {
  if (this != internal_default_instance()) delete constant_velocity_;
  if (this != internal_default_instance()) delete imu_based_;
}

void PoseExtrapolatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseExtrapolatorOptions::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseExtrapolatorOptions& PoseExtrapolatorOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::scc_info_PoseExtrapolatorOptions.base);
  return *internal_default_instance();
}


void PoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && constant_velocity_ != NULL) {
    delete constant_velocity_;
  }
  constant_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_based_ != NULL) {
    delete imu_based_;
  }
  imu_based_ = NULL;
  use_imu_based_ = false;
  _internal_metadata_.Clear();
}

bool PoseExtrapolatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_imu_based = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_imu_based_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constant_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_based()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return false;
#undef DO_
}

void PoseExtrapolatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_imu_based(), output);
  }

  // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_constant_velocity(), output);
  }

  // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_imu_based(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseExtrapolatorOptions)
}

::google::protobuf::uint8* PoseExtrapolatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_imu_based(), target);
  }

  // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_constant_velocity(), deterministic, target);
  }

  // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_imu_based(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return target;
}

size_t PoseExtrapolatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constant_velocity_);
  }

  // .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *imu_based_);
  }

  // bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseExtrapolatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseExtrapolatorOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseExtrapolatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseExtrapolatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void PoseExtrapolatorOptions::MergeFrom(const PoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constant_velocity()) {
    mutable_constant_velocity()->::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::MergeFrom(from.constant_velocity());
  }
  if (from.has_imu_based()) {
    mutable_imu_based()->::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::MergeFrom(from.imu_based());
  }
  if (from.use_imu_based() != 0) {
    set_use_imu_based(from.use_imu_based());
  }
}

void PoseExtrapolatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseExtrapolatorOptions::CopyFrom(const PoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseExtrapolatorOptions::IsInitialized() const {
  return true;
}

void PoseExtrapolatorOptions::Swap(PoseExtrapolatorOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseExtrapolatorOptions::InternalSwap(PoseExtrapolatorOptions* other) {
  using std::swap;
  swap(constant_velocity_, other->constant_velocity_);
  swap(imu_based_, other->imu_based_);
  swap(use_imu_based_, other->use_imu_based_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseExtrapolatorOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::mapping::proto::PoseExtrapolatorOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseExtrapolatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseExtrapolatorOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
