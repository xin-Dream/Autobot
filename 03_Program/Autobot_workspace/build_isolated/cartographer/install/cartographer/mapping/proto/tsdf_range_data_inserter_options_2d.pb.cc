// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.proto

#include "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NormalEstimationOptions2D;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto
namespace cartographer {
namespace mapping {
namespace proto {
class TSDFRangeDataInserterOptions2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TSDFRangeDataInserterOptions2D>
      _instance;
} _TSDFRangeDataInserterOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto {
static void InitDefaultsTSDFRangeDataInserterOptions2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TSDFRangeDataInserterOptions2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TSDFRangeDataInserterOptions2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTSDFRangeDataInserterOptions2D}, {
      &protobuf_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto::scc_info_NormalEstimationOptions2D.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TSDFRangeDataInserterOptions2D.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, truncation_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, maximum_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, update_free_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, normal_estimation_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, project_sdf_distance_to_scan_normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, update_weight_range_exponent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, update_weight_angle_scan_normal_to_ray_kernel_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D, update_weight_distance_cell_to_hit_kernel_bandwidth_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_TSDFRangeDataInserterOptions2D_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nDcartographer/mapping/proto/tsdf_range_"
      "data_inserter_options_2d.proto\022\032cartogra"
      "pher.mapping.proto\032=cartographer/mapping"
      "/proto/normal_estimation_options_2d.prot"
      "o\"\233\003\n\036TSDFRangeDataInserterOptions2D\022\033\n\023"
      "truncation_distance\030\001 \001(\001\022\026\n\016maximum_wei"
      "ght\030\002 \001(\001\022\031\n\021update_free_space\030\003 \001(\010\022X\n\031"
      "normal_estimation_options\030\004 \001(\01325.cartog"
      "rapher.mapping.proto.NormalEstimationOpt"
      "ions2D\022+\n#project_sdf_distance_to_scan_n"
      "ormal\030\005 \001(\010\022$\n\034update_weight_range_expon"
      "ent\030\006 \001(\005\022\?\n7update_weight_angle_scan_no"
      "rmal_to_ray_kernel_bandwidth\030\007 \001(\001\022;\n3up"
      "date_weight_distance_cell_to_hit_kernel_"
      "bandwidth\030\010 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void TSDFRangeDataInserterOptions2D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TSDFRangeDataInserterOptions2D_default_instance_._instance.get_mutable()->normal_estimation_options_ = const_cast< ::cartographer::mapping::proto::NormalEstimationOptions2D*>(
      ::cartographer::mapping::proto::NormalEstimationOptions2D::internal_default_instance());
}
void TSDFRangeDataInserterOptions2D::clear_normal_estimation_options() {
  if (GetArenaNoVirtual() == NULL && normal_estimation_options_ != NULL) {
    delete normal_estimation_options_;
  }
  normal_estimation_options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSDFRangeDataInserterOptions2D::kTruncationDistanceFieldNumber;
const int TSDFRangeDataInserterOptions2D::kMaximumWeightFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateFreeSpaceFieldNumber;
const int TSDFRangeDataInserterOptions2D::kNormalEstimationOptionsFieldNumber;
const int TSDFRangeDataInserterOptions2D::kProjectSdfDistanceToScanNormalFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateWeightRangeExponentFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateWeightAngleScanNormalToRayKernelBandwidthFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateWeightDistanceCellToHitKernelBandwidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSDFRangeDataInserterOptions2D::TSDFRangeDataInserterOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto::scc_info_TSDFRangeDataInserterOptions2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
}
TSDFRangeDataInserterOptions2D::TSDFRangeDataInserterOptions2D(const TSDFRangeDataInserterOptions2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_normal_estimation_options()) {
    normal_estimation_options_ = new ::cartographer::mapping::proto::NormalEstimationOptions2D(*from.normal_estimation_options_);
  } else {
    normal_estimation_options_ = NULL;
  }
  ::memcpy(&truncation_distance_, &from.truncation_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_weight_distance_cell_to_hit_kernel_bandwidth_) -
    reinterpret_cast<char*>(&truncation_distance_)) + sizeof(update_weight_distance_cell_to_hit_kernel_bandwidth_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
}

void TSDFRangeDataInserterOptions2D::SharedCtor() {
  ::memset(&normal_estimation_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_weight_distance_cell_to_hit_kernel_bandwidth_) -
      reinterpret_cast<char*>(&normal_estimation_options_)) + sizeof(update_weight_distance_cell_to_hit_kernel_bandwidth_));
}

TSDFRangeDataInserterOptions2D::~TSDFRangeDataInserterOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  SharedDtor();
}

void TSDFRangeDataInserterOptions2D::SharedDtor() {
  if (this != internal_default_instance()) delete normal_estimation_options_;
}

void TSDFRangeDataInserterOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TSDFRangeDataInserterOptions2D::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TSDFRangeDataInserterOptions2D& TSDFRangeDataInserterOptions2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto::scc_info_TSDFRangeDataInserterOptions2D.base);
  return *internal_default_instance();
}


void TSDFRangeDataInserterOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && normal_estimation_options_ != NULL) {
    delete normal_estimation_options_;
  }
  normal_estimation_options_ = NULL;
  ::memset(&truncation_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_weight_distance_cell_to_hit_kernel_bandwidth_) -
      reinterpret_cast<char*>(&truncation_distance_)) + sizeof(update_weight_distance_cell_to_hit_kernel_bandwidth_));
  _internal_metadata_.Clear();
}

bool TSDFRangeDataInserterOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double truncation_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &truncation_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maximum_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update_free_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_free_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normal_estimation_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool project_sdf_distance_to_scan_normal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &project_sdf_distance_to_scan_normal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 update_weight_range_exponent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_weight_range_exponent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_weight_angle_scan_normal_to_ray_kernel_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_weight_distance_cell_to_hit_kernel_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  return false;
#undef DO_
}

void TSDFRangeDataInserterOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->truncation_distance(), output);
  }

  // double maximum_weight = 2;
  if (this->maximum_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maximum_weight(), output);
  }

  // bool update_free_space = 3;
  if (this->update_free_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->update_free_space(), output);
  }

  // .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
  if (this->has_normal_estimation_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_normal_estimation_options(), output);
  }

  // bool project_sdf_distance_to_scan_normal = 5;
  if (this->project_sdf_distance_to_scan_normal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->project_sdf_distance_to_scan_normal(), output);
  }

  // int32 update_weight_range_exponent = 6;
  if (this->update_weight_range_exponent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->update_weight_range_exponent(), output);
  }

  // double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
  if (this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth(), output);
  }

  // double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
  if (this->update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->update_weight_distance_cell_to_hit_kernel_bandwidth(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
}

::google::protobuf::uint8* TSDFRangeDataInserterOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->truncation_distance(), target);
  }

  // double maximum_weight = 2;
  if (this->maximum_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maximum_weight(), target);
  }

  // bool update_free_space = 3;
  if (this->update_free_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->update_free_space(), target);
  }

  // .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
  if (this->has_normal_estimation_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_normal_estimation_options(), deterministic, target);
  }

  // bool project_sdf_distance_to_scan_normal = 5;
  if (this->project_sdf_distance_to_scan_normal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->project_sdf_distance_to_scan_normal(), target);
  }

  // int32 update_weight_range_exponent = 6;
  if (this->update_weight_range_exponent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->update_weight_range_exponent(), target);
  }

  // double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
  if (this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth(), target);
  }

  // double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
  if (this->update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->update_weight_distance_cell_to_hit_kernel_bandwidth(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  return target;
}

size_t TSDFRangeDataInserterOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
  if (this->has_normal_estimation_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *normal_estimation_options_);
  }

  // double truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    total_size += 1 + 8;
  }

  // double maximum_weight = 2;
  if (this->maximum_weight() != 0) {
    total_size += 1 + 8;
  }

  // bool update_free_space = 3;
  if (this->update_free_space() != 0) {
    total_size += 1 + 1;
  }

  // bool project_sdf_distance_to_scan_normal = 5;
  if (this->project_sdf_distance_to_scan_normal() != 0) {
    total_size += 1 + 1;
  }

  // int32 update_weight_range_exponent = 6;
  if (this->update_weight_range_exponent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->update_weight_range_exponent());
  }

  // double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
  if (this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    total_size += 1 + 8;
  }

  // double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
  if (this->update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TSDFRangeDataInserterOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  const TSDFRangeDataInserterOptions2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSDFRangeDataInserterOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
    MergeFrom(*source);
  }
}

void TSDFRangeDataInserterOptions2D::MergeFrom(const TSDFRangeDataInserterOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_normal_estimation_options()) {
    mutable_normal_estimation_options()->::cartographer::mapping::proto::NormalEstimationOptions2D::MergeFrom(from.normal_estimation_options());
  }
  if (from.truncation_distance() != 0) {
    set_truncation_distance(from.truncation_distance());
  }
  if (from.maximum_weight() != 0) {
    set_maximum_weight(from.maximum_weight());
  }
  if (from.update_free_space() != 0) {
    set_update_free_space(from.update_free_space());
  }
  if (from.project_sdf_distance_to_scan_normal() != 0) {
    set_project_sdf_distance_to_scan_normal(from.project_sdf_distance_to_scan_normal());
  }
  if (from.update_weight_range_exponent() != 0) {
    set_update_weight_range_exponent(from.update_weight_range_exponent());
  }
  if (from.update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    set_update_weight_angle_scan_normal_to_ray_kernel_bandwidth(from.update_weight_angle_scan_normal_to_ray_kernel_bandwidth());
  }
  if (from.update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    set_update_weight_distance_cell_to_hit_kernel_bandwidth(from.update_weight_distance_cell_to_hit_kernel_bandwidth());
  }
}

void TSDFRangeDataInserterOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSDFRangeDataInserterOptions2D::CopyFrom(const TSDFRangeDataInserterOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSDFRangeDataInserterOptions2D::IsInitialized() const {
  return true;
}

void TSDFRangeDataInserterOptions2D::Swap(TSDFRangeDataInserterOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSDFRangeDataInserterOptions2D::InternalSwap(TSDFRangeDataInserterOptions2D* other) {
  using std::swap;
  swap(normal_estimation_options_, other->normal_estimation_options_);
  swap(truncation_distance_, other->truncation_distance_);
  swap(maximum_weight_, other->maximum_weight_);
  swap(update_free_space_, other->update_free_space_);
  swap(project_sdf_distance_to_scan_normal_, other->project_sdf_distance_to_scan_normal_);
  swap(update_weight_range_exponent_, other->update_weight_range_exponent_);
  swap(update_weight_angle_scan_normal_to_ray_kernel_bandwidth_, other->update_weight_angle_scan_normal_to_ray_kernel_bandwidth_);
  swap(update_weight_distance_cell_to_hit_kernel_bandwidth_, other->update_weight_distance_cell_to_hit_kernel_bandwidth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TSDFRangeDataInserterOptions2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
